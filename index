<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kumacho Movie App</title> <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .table-container {
            max-height: 55vh; 
            overflow-y: auto;
        }
        th, td {
            padding: 0.75rem;
            text-align: left; 
            border-bottom-width: 1px;
        }
        th {
            background-color: #f3f4f6; /* bg-gray-100 */
            position: sticky;
            top: 0;
            z-index: 10; 
        }
        .table-container::-webkit-scrollbar {
            width: 8px;
        }
        .table-container::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 10px;
        }
        .table-container::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 10px;
        }
        .table-container::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
        #searchInput:focus {
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.5); 
        }
        .clickable-title {
            color: #4f46e5; 
            text-decoration: underline;
            cursor: pointer;
        }
        .clickable-title:hover {
            color: #3730a3; 
        }
        .modal {
            transition: opacity 0.3s ease-in-out;
            z-index: 50; 
        }
        .modal-content {
            transition: transform 0.3s ease-in-out, opacity 0.3s ease-in-out;
            max-height: 90vh; 
            overflow-y: auto;
        }
        #recommendationModal iframe {
            width: 100%;
            height: 70vh;
            border: none;
        }
        .loader {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db; /* Blue */
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .faq-question {
            font-weight: 600; /* semibold */
            color: #1f2937; /* gray-800 */
            margin-top: 0.75rem; /* mt-3 */
        }
        .faq-answer {
            color: #4b5563; /* gray-600 */
            margin-bottom: 0.75rem; /* mb-3 */
            font-size: 0.875rem; /* text-sm */
        }
    </style>
</head>
<body class="bg-gray-50 text-gray-800 antialiased">
    <div class="container mx-auto p-4 sm:p-6 lg:p-8">
        <header class="mb-6 text-center">
            <h1 class="text-3xl sm:text-4xl font-bold text-indigo-600">Kumacho Movie App</h1> <p class="text-gray-600 mt-2">Browse and search your curated lists of Movies, TV Shows, Cartoons, and Anime.</p>
            <div class="mt-4 space-x-2">
                <button id="openRecommendationModalButton" class="bg-green-500 hover:bg-green-600 text-white font-semibold py-2 px-6 rounded-lg shadow-md transition duration-150 ease-in-out transform hover:scale-105">
                    Suggest a Recommendation
                </button>
                <button id="openFaqModalButton" class="bg-sky-500 hover:bg-sky-600 text-white font-semibold py-2 px-6 rounded-lg shadow-md transition duration-150 ease-in-out transform hover:scale-105">
                    FAQ / Help
                </button>
            </div>
        </header>

        <div class="mb-6 flex flex-wrap justify-center gap-2 sm:gap-3">
            <button data-list="movies" class="list-btn bg-indigo-500 hover:bg-indigo-600 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition duration-150 ease-in-out transform hover:scale-105">Movies</button>
            <button data-list="tvshows" class="list-btn bg-teal-500 hover:bg-teal-600 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition duration-150 ease-in-out transform hover:scale-105">TV Shows</button>
            <button data-list="cartoons" class="list-btn bg-amber-500 hover:bg-amber-600 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition duration-150 ease-in-out transform hover:scale-105">Cartoons</button>
            <button data-list="anime" class="list-btn bg-rose-500 hover:bg-rose-600 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition duration-150 ease-in-out transform hover:scale-105">Anime</button>
        </div>

        <div class="mb-6">
            <input type="text" id="searchInput" placeholder="Search current list (e.g., title, genre, year)..." class="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500">
        </div>

        <div id="listContainer" class="bg-white p-4 sm:p-6 rounded-xl shadow-xl">
            <h2 id="listTitle" class="text-2xl font-semibold mb-4 text-gray-700">Select a category to view</h2>
            <div class="table-container rounded-lg border border-gray-200">
                <table id="mediaTable" class="min-w-full divide-y divide-gray-200">
                    <thead id="tableHead"></thead>
                    <tbody id="tableBody" class="bg-white divide-y divide-gray-200">
                        <tr><td id="initialMessageCell" class="text-center text-gray-500 py-4" colspan="4">No list selected. Please choose a category above.</td></tr>
                    </tbody>
                </table>
            </div>
             <p id="itemCount" class="text-sm text-gray-500 mt-4 text-right"></p>
        </div>
    </div>

    <div id="detailsModal" class="modal fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center hidden p-4 opacity-0">
        <div class="modal-content relative mx-auto p-6 border w-full max-w-md shadow-xl rounded-xl bg-white transform scale-95 opacity-0">
            <div class="flex justify-between items-center pb-3 border-b border-gray-200">
                <h3 class="text-xl leading-6 font-medium text-gray-900" id="modalTitle">Item Details</h3>
                <button id="closeModalButton" class="text-gray-400 hover:text-gray-600 transition">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                </button>
            </div>
            <div class="mt-4">
                <div id="modalBody" class="text-sm text-gray-700 space-y-2"></div>
            </div>
            <div class="mt-6 pt-3 border-t border-gray-200 text-right">
                <button id="modalCloseButtonFooter" class="px-4 py-2 bg-indigo-500 text-white text-base font-medium rounded-lg shadow-sm hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition">
                    Close
                </button>
            </div>
        </div>
    </div>

    <div id="recommendationModal" class="modal fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center hidden p-4 opacity-0">
        <div class="modal-content relative mx-auto p-6 border w-full max-w-2xl shadow-xl rounded-xl bg-white transform scale-95 opacity-0">
            <div class="flex justify-between items-center pb-3 border-b border-gray-200">
                <h3 class="text-xl leading-6 font-medium text-gray-900">Suggest a Recommendation</h3>
                <button id="closeRecommendationModalButton" class="text-gray-400 hover:text-gray-600 transition">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                </button>
            </div>
            <div class="mt-4">
                <iframe id="recommendationFormIframe" frameborder="0" marginheight="0" marginwidth="0">Loadingâ€¦</iframe>
            </div>
            <div class="mt-6 pt-3 border-t border-gray-200 text-right">
                <button id="recommendationModalCloseButtonFooter" class="px-4 py-2 bg-green-500 text-white text-base font-medium rounded-lg shadow-sm hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition">
                    Close
                </button>
            </div>
        </div>
    </div>

    <div id="faqModal" class="modal fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center hidden p-4 opacity-0">
        <div class="modal-content relative mx-auto p-6 border w-full max-w-lg shadow-xl rounded-xl bg-white transform scale-95 opacity-0">
            <div class="flex justify-between items-center pb-3 border-b border-gray-200">
                <h3 class="text-xl leading-6 font-medium text-gray-900">FAQ / Help</h3>
                <button id="closeFaqModalButton" class="text-gray-400 hover:text-gray-600 transition">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                </button>
            </div>
            <div id="faqModalBody" class="mt-4 space-y-4 text-left"> <div>
                    <p class="faq-question">Why isn't data loading from the CSV links when I open this HTML file directly in Chrome?</p>
                    <p class="faq-answer">When you open an HTML file from your local computer (using the `file:///` protocol), browsers like Chrome have strict security rules (CORS - Cross-Origin Resource Sharing). These rules prevent the page from fetching data from external websites like Google Sheets because Google's servers likely don't explicitly allow requests from `file:///` origins.</p>
                    <p class="faq-answer"><strong>Solution for local testing:</strong> Serve this HTML file using a local web server. For example, if you have Python installed, navigate to this file's directory in your terminal and run: `python -m http.server`. Then open `http://localhost:8000/your_file_name.html` (replacing `your_file_name.html` with the actual name of this HTML file) in your browser. This usually resolves the data loading issue for local testing.</p>
                </div>
                <div>
                    <p class="faq-question">Why does a modal (pop-up) sometimes just show a grey screen without content?</p>
                    <p class="faq-answer">This can happen if the browser doesn't correctly apply the display and transition styles in the right order, making the content part of the pop-up remain invisible. The code tries to manage this carefully. If it persists, a page refresh might help. If data for the item details is missing, the modal might also appear mostly empty.</p>
                </div>
                <div>
                    <p class="faq-question">How are the lists updated?</p>
                    <p class="faq-answer">The data is intended to be pulled live from the Google Sheets CSV links you provided. If you update your Google Sheets and they are correctly published to the web as CSVs (with sharing set to "Anyone with the link can view"), the app should fetch the latest data when you select a category.</p>
                </div>
            </div>
            <div class="mt-6 pt-3 border-t border-gray-200 text-right">
                <button id="faqModalCloseButtonFooter" class="px-4 py-2 bg-sky-500 text-white text-base font-medium rounded-lg shadow-sm hover:bg-sky-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sky-500 transition">
                    Close
                </button>
            </div>
        </div>
    </div>

    <script>
        // --- Configuration ---
        const CSV_URLS = {
            movies: "https://docs.google.com/spreadsheets/d/e/2PACX-1vTeW7g2d80vRYYW84HsaltNDkQgzvkfcSqUR3z-Z2W2AaKWVtSVJazBvfTnq3OXb0zZXcMapQJFCkZ9/pub?gid=0&single=true&output=csv",
            tvshows: "https://docs.google.com/spreadsheets/d/e/2PACX-1vTeW7g2d80vRYYW84HsaltNDkQgzvkfcSqUR3z-Z2W2AaKWVtSVJazBvfTnq3OXb0zZXcMapQJFCkZ9/pub?gid=1290796578&single=true&output=csv",
            cartoons: "https://docs.google.com/spreadsheets/d/e/2PACX-1vTeW7g2d80vRYYW84HsaltNDkQgzvkfcSqUR3z-Z2W2AaKWVtSVJazBvfTnq3OXb0zZXcMapQJFCkZ9/pub?gid=498269002&single=true&output=csv",
            anime: "https://docs.google.com/spreadsheets/d/e/2PACX-1vTeW7g2d80vRYYW84HsaltNDkQgzvkfcSqUR3z-Z2W2AaKWVtSVJazBvfTnq3OXb0zZXcMapQJFCkZ9/pub?gid=743139865&single=true&output=csv"
        };
        const RECOMMENDATION_FORM_URL = "https://forms.gle/chLrCD4QxEE23SPa8";

        // --- App State ---
        let allDataCache = { movies: null, tvshows: null, cartoons: null, anime: null }; // Cache for fetched data
        let currentListType = null;
        let currentHeaders = [];
        let currentListTitle = 'No list selected';

        // --- DOM Elements ---
        const listButtons = document.querySelectorAll('.list-btn');
        const searchInput = document.getElementById('searchInput');
        const listTitleElement = document.getElementById('listTitle');
        const tableHeadElement = document.getElementById('tableHead');
        const tableBodyElement = document.getElementById('tableBody');
        const itemCountElement = document.getElementById('itemCount');
        const initialMessageCell = document.getElementById('initialMessageCell');
        
        const detailsModal = document.getElementById('detailsModal');
        const detailsModalContent = detailsModal.querySelector('.modal-content');
        const modalTitleElement = document.getElementById('modalTitle');
        const modalBodyElement = document.getElementById('modalBody');
        const closeModalButton = document.getElementById('closeModalButton');
        const modalCloseButtonFooter = document.getElementById('modalCloseButtonFooter');

        const recommendationModal = document.getElementById('recommendationModal');
        const recommendationModalContent = recommendationModal.querySelector('.modal-content');
        const openRecommendationModalButton = document.getElementById('openRecommendationModalButton');
        const closeRecommendationModalButton = document.getElementById('closeRecommendationModalButton');
        const recommendationModalCloseButtonFooter = document.getElementById('recommendationModalCloseButtonFooter');
        const recommendationFormIframe = document.getElementById('recommendationFormIframe');

        const faqModal = document.getElementById('faqModal');
        const faqModalContent = faqModal.querySelector('.modal-content');
        const openFaqModalButton = document.getElementById('openFaqModalButton');
        const closeFaqModalButton = document.getElementById('closeFaqModalButton');
        const faqModalCloseButtonFooter = document.getElementById('faqModalCloseButtonFooter');

        // --- Event Listeners ---
        document.addEventListener('DOMContentLoaded', () => {
            listButtons.forEach(button => {
                button.addEventListener('click', () => { // Removed async here, as loadAndDisplayList is async
                    const listType = button.dataset.list;
                    setActiveButton(button);
                    searchInput.value = ''; 
                    loadAndDisplayList(listType); // This is an async function
                });
            });

            searchInput.addEventListener('input', renderTable); 

            // Modal Close Handlers
            [closeModalButton, modalCloseButtonFooter].forEach(btn => btn.addEventListener('click', hideDetailsModal));
            detailsModal.addEventListener('click', (event) => { if (event.target === detailsModal) hideDetailsModal(); });

            openRecommendationModalButton.addEventListener('click', showRecommendationModal);
            [closeRecommendationModalButton, recommendationModalCloseButtonFooter].forEach(btn => btn.addEventListener('click', hideRecommendationModal));
            recommendationModal.addEventListener('click', (event) => { if (event.target === recommendationModal) hideRecommendationModal(); });
            
            openFaqModalButton.addEventListener('click', showFaqModal);
            [closeFaqModalButton, faqModalCloseButtonFooter].forEach(btn => btn.addEventListener('click', hideFaqModal));
            faqModal.addEventListener('click', (event) => { if (event.target === faqModal) hideFaqModal(); });
        });

        // --- Core Functions ---
        async function fetchCSVData(url) {
            console.log(`Fetching CSV from: ${url}`);
            try {
                const response = await fetch(url, { cache: "no-store" }); // Try to bypass browser cache for fresh data
                if (!response.ok) {
                    const errorText = `HTTP error! Status: ${response.status} for URL: ${url}.`;
                    console.error(errorText);
                    if (window.location.protocol === "file:") {
                        console.warn("Fetching external resources from 'file://' protocol is often blocked by browser CORS policy. Try using a local web server.");
                    }
                    throw new Error(errorText);
                }
                const csvText = await response.text();
                console.log(`Successfully fetched CSV data from ${url}. Length: ${csvText.length}`);
                if (csvText.trim() === "") {
                    console.warn(`CSV file from ${url} is empty or contains only whitespace.`);
                    return [];
                }
                return parseCSV(csvText);
            } catch (error) {
                console.error("Error in fetchCSVData:", error);
                // Update table directly with error message
                tableHeadElement.innerHTML = ''; // Clear headers
                tableBodyElement.innerHTML = `<tr><td colspan="1" class="text-center text-red-600 font-semibold py-4">Failed to load data: ${error.message}. Check console, CSV link (ensure it's public & 'output=csv'), and network. If running locally, use a web server due to CORS.</td></tr>`;
                itemCountElement.textContent = '';
                return [];
            }
        }

        function parseCSV(csvText) {
            // Basic CSV parser. Assumes first row is headers.
            // Handles fields enclosed in double quotes, and escaped double quotes ("") within fields.
            console.log("Parsing CSV text...");
            const lines = csvText.trim().split(/\r\n|\n/);
            if (lines.length < 1) {
                console.warn("CSV is empty.");
                return [];
            }
        
            // More robust header parsing: split by comma NOT inside quotes
            const headerLine = lines[0];
            const rawHeaders = [];
            let currentHeader = '';
            let inQuotes = false;
            for (let i = 0; i < headerLine.length; i++) {
                const char = headerLine[i];
                if (char === '"') inQuotes = !inQuotes;
                else if (char === ',' && !inQuotes) {
                    rawHeaders.push(currentHeader);
                    currentHeader = '';
                } else {
                    currentHeader += char;
                }
            }
            rawHeaders.push(currentHeader); // last header
        
            const headers = rawHeaders.map(header => header.trim().replace(/^"|"$/g, '')); // Strip surrounding quotes
            console.log("Parsed CSV Headers:", headers);
            const data = [];
        
            for (let i = 1; i < lines.length; i++) {
                if (!lines[i].trim()) continue;
        
                const values = [];
                let currentField = '';
                inQuotes = false; // Reset for each line
        
                for (let j = 0; j < lines[i].length; j++) {
                    const char = lines[i][j];
        
                    if (char === '"') {
                        if (inQuotes && j + 1 < lines[i].length && lines[i][j+1] === '"') {
                            currentField += '"'; // Escaped double quote
                            j++; // Skip next quote
                        } else {
                            inQuotes = !inQuotes; // Toggle quote state
                        }
                    } else if (char === ',' && !inQuotes) {
                        values.push(currentField); // Don't trim yet, preserve original spacing if any
                        currentField = '';
                    } else {
                        currentField += char;
                    }
                }
                values.push(currentField); // Add last field
        
                if (values.length === headers.length) {
                    const rowObject = {};
                    headers.forEach((header, index) => {
                        // Trim and remove surrounding quotes from values here
                        rowObject[headerToKey(header)] = values[index].trim().replace(/^"|"$/g, '');
                    });
                    data.push(rowObject);
                } else {
                    console.warn(`Skipping malformed CSV line ${i + 1}: Expected ${headers.length} fields, got ${values.length}. Line: "${lines[i]}"`);
                }
            }
            console.log(`Parsed ${data.length} data rows.`);
            return data;
        }
        
        async function loadAndDisplayList(listType) {
            currentListType = listType;
            setTableLoadingState(true);
            itemCountElement.textContent = ''; 

            console.log(`Loading data for: ${listType}`);
            // Always fetch fresh data from CSV for this version
            const data = await fetchCSVData(CSV_URLS[listType]);
            allDataCache[currentListType] = data; // Store fetched data in cache
            
            switch (listType) {
                case 'movies':
                    currentHeaders = ['Title']; 
                    currentListTitle = 'Movies';
                    break;
                case 'tvshows':
                    currentHeaders = ['Title', 'Genre(s)', 'Years Aired'];
                    currentListTitle = 'TV Shows';
                    break;
                case 'cartoons':
                    currentHeaders = ['Title', 'Genre(s)', 'Years Aired', 'Country of Origin'];
                    currentListTitle = 'Cartoons';
                    break;
                case 'anime':
                    currentHeaders = ['Title', 'Genre(s)', 'Years Aired', 'Content Rating'];
                    currentListTitle = 'Anime';
                    break;
            }
            setTableLoadingState(false);
            renderTable();
        }
        
        function setTableLoadingState(isLoading) {
            if (isLoading) {
                tableHeadElement.innerHTML = ''; // Clear headers during load
                tableBodyElement.innerHTML = `<tr><td colspan="1" class="text-center py-4"><div class="loader"></div><p class="text-gray-500">Loading data...</p></td></tr>`;
                if(initialMessageCell) initialMessageCell.style.display = 'none';
            } else {
                 if(initialMessageCell) initialMessageCell.style.display = 'none';
            }
        }

        function setActiveButton(activeBtn) {
            listButtons.forEach(btn => {
                btn.classList.remove('ring-2', 'ring-offset-2', 'ring-indigo-500', 'ring-teal-500', 'ring-amber-500', 'ring-rose-500');
                if (btn === activeBtn) {
                    btn.classList.add('ring-2', 'ring-offset-2');
                    const listType = btn.dataset.list;
                    if (listType === 'movies') btn.classList.add('ring-indigo-500');
                    else if (listType === 'tvshows') btn.classList.add('ring-teal-500');
                    else if (listType === 'cartoons') btn.classList.add('ring-amber-500');
                    else if (listType === 'anime') btn.classList.add('ring-rose-500');
                }
            });
        }
        
        function renderTable() {
            listTitleElement.textContent = currentListTitle;
            tableHeadElement.innerHTML = '';
            tableBodyElement.innerHTML = ''; // Clear previous content
            itemCountElement.textContent = '';
            if(initialMessageCell) initialMessageCell.style.display = 'none';

            if (!currentListType) {
                tableBodyElement.innerHTML = `<tr><td class="text-center text-gray-500 py-4" colspan="1">Select a category to view.</td></tr>`;
                return;
            }
            
            const dataForCurrentList = allDataCache[currentListType] || [];

            if (dataForCurrentList.length === 0) {
                const colSpan = currentHeaders.length > 0 ? currentHeaders.length : 1;
                // Check if the error message from fetchCSVData is already there
                if (!tableBodyElement.querySelector('.text-red-600')) {
                     tableBodyElement.innerHTML = `<tr><td colspan="${colSpan}" class="text-center text-gray-500 py-4">No ${currentListTitle.toLowerCase()} data found. Ensure CSV is populated, public, and link is correct.</td></tr>`;
                }
                return;
            }
            
            const headerRow = tableHeadElement.insertRow();
            currentHeaders.forEach(headerText => {
                const th = document.createElement('th');
                th.className = 'px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider';
                th.textContent = headerText;
                headerRow.appendChild(th);
            });

            const searchTerm = searchInput.value.toLowerCase();
            const filteredData = dataForCurrentList.filter(item => {
                if (!searchTerm) return true; 
                return currentHeaders.some(header => {
                    const key = headerToKey(header); 
                    const value = item[key] || ''; 
                    return String(value).toLowerCase().includes(searchTerm);
                });
            });
            
            itemCountElement.textContent = `Showing ${filteredData.length} of ${dataForCurrentList.length} items.`;

            if (filteredData.length > 0) {
                filteredData.forEach(item => {
                    const row = tableBodyElement.insertRow();
                    currentHeaders.forEach(header => {
                        const cell = row.insertCell();
                        cell.className = 'px-4 py-3 whitespace-nowrap text-sm text-gray-700';
                        const key = headerToKey(header); 
                        const value = item[key] || '';
                        
                        if (header === 'Title') { 
                            cell.textContent = value;
                            cell.classList.add('clickable-title');
                            cell.onclick = () => showItemDetails(item);
                        } else {
                            cell.textContent = value;
                        }
                    });
                });
            } else {
                const colSpan = currentHeaders.length > 0 ? currentHeaders.length : 1;
                tableBodyElement.innerHTML = `<tr><td colspan="${colSpan}" class="text-center text-gray-500 py-4">No items match your search.</td></tr>`;
            }
        }

        function headerToKey(headerText) {
            if (!headerText) return '';
            // Normalize: lowercase, remove all non-alphanumeric characters
            return headerText.toLowerCase().replace(/[^a-z0-9]/gi, '');
        }
        
        function showModal(modalElement, modalContentElement) {
            modalElement.classList.remove('hidden');
            requestAnimationFrame(() => { // Ensures 'hidden' is processed
                modalElement.classList.remove('opacity-0');
                modalContentElement.classList.remove('opacity-0', 'scale-95');
                modalContentElement.classList.add('opacity-100', 'scale-100');
            });
        }

        function hideModal(modalElement, modalContentElement, onHideCallback) {
            modalContentElement.classList.add('opacity-0', 'scale-95');
            modalContentElement.classList.remove('opacity-100', 'scale-100');
            modalElement.classList.add('opacity-0');
            setTimeout(() => {
                 modalElement.classList.add('hidden');
                 if (onHideCallback) onHideCallback();
            }, 300); // Match CSS transition duration
        }

        function showItemDetails(item) {
            modalTitleElement.textContent = item.title || "Details"; 
            modalBodyElement.innerHTML = ''; 

            // Display all properties of the item object dynamically
            // This makes it flexible to CSV columns
            for (const key in item) {
                if (Object.hasOwnProperty.call(item, key)) {
                    const value = item[key] || 'N/A';
                    const detailP = document.createElement('p');
                    // Attempt to make a nice display name for the key
                    let displayName = key.replace(/([A-Z0-9])/g, ' $1').replace(/^./, str => str.toUpperCase());
                    displayName = displayName.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' '); // Capitalize each word

                    detailP.innerHTML = `<strong class="font-semibold text-gray-600">${displayName}:</strong> ${value}`;
                    modalBodyElement.appendChild(detailP);
                }
            }
            showModal(detailsModal, detailsModalContent);
        }
        function hideDetailsModal() { hideModal(detailsModal, detailsModalContent); }

        function showRecommendationModal() {
            recommendationFormIframe.src = RECOMMENDATION_FORM_URL;
            showModal(recommendationModal, recommendationModalContent);
        }
        function hideRecommendationModal() { 
            hideModal(recommendationModal, recommendationModalContent, () => {
                recommendationFormIframe.src = "about:blank"; // Clear src to stop loading
            });
        }

        function showFaqModal() { showModal(faqModal, faqModalContent); }
        function hideFaqModal() { hideModal(faqModal, faqModalContent); }

    </script>
</body>
</html>
```
I've updated the "Interactive Media List Explorer" on the Canvas with the following changes:

1.  **New FAQ / Help Modal**:
    * An "FAQ / Help" button is now in the header.
    * Clicking it opens a new modal (`faqModal`) which contains answers to common questions, including the detailed explanation about the CORS issue with loading CSVs from `file:///` paths and the solution (using a local web server).
    * The modal is styled consistently and uses the same refined show/hide logic as other modals.

2.  **Refined Modal Display Logic**:
    * I've created generic `showModal` and `hideModal` functions to handle the transitions more consistently. These functions use `requestAnimationFrame` for showing and `setTimeout` for hiding to ensure smooth animations after the `display` property changes. This should improve the reliability of modals displaying their content correctly.

3.  **Improved CSV Parsing and Error Handling**:
    * The `parseCSV` function has been made slightly more robust to handle headers and values that might be fully quoted.
    * The `fetchCSVData` function now has more explicit console logging. If a fetch fails, it will attempt to display a more user-friendly error directly in the table, mentioning the status code and the potential CORS issue if running locally.
    * I've added `cache: "no-store"` to the `fetch` request to try and ensure the latest data is pulled from your Google Sheets each time, bypassing browser cache for these specific requests.

4.  **General Code Structure**: Minor cleanups for clarity. The app title in the HTML is now "Kumacho Movie App".

**Regarding the CSV data not loading in the Canvas preview (if it persists):**
As explained in the FAQ and previous messages, this is most likely due to the reasons mentioned (CORS, changes in the preview environment, or issues with the Google Sheets links themselves).
* **Please double-check your Google Sheet publish settings**: Ensure each sheet is "Published to the web" as a "Comma-separated values (.csv)" file and that "Entire document" or the specific sheet is selected. Also, ensure under "Link sharing options" that "Anyone with the link can view".
* **Open your browser's developer console (F12)** when you test in the Canvas preview. Look for any red error messages in the "Console" tab when you click a category button. These errors (especially CORS errors or network errors like 403 Forbidden / 404 Not Found) are critical clues.

The app is structured to show loading messages and then either the data or an error message if fetching/parsing fails. The screenshot you provided showing "No tv shows found or list is empty. Check CSV source or network connection." indicates that the `fetchCSVData` function for the TV Shows list likely returned an empty array, which happens if the `fetch` call itself fails (e.g., due to CORS or a network error) or if the fetched CSV is empty/malform
